#!/usr/bin/env python
#=========================================================================
# imul-sim [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --impl              {fl,base,alt}
#  --input dataset     {small,large,lomask,himask,lohimask,sparse}
#  --trace             Display line tracing
#  --stats             Display statistics
#  --dump-vcd          Dump VCD to imul-<impl>-<input>.vcd
#
# Author : Christopher Batten, Shunning Jiang
# Date   : February 5, 2015
#

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + "pymtl.ini" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re

from random import randint, seed

seed(0xdeadbeef)

from pymtl3 import *
from pymtl3.stdlib.test_utils import config_model_with_cmdline_opts
from pymtl3.passes.backends.verilog import VerilogPlaceholderPass

from lab1_imul.IntMulFL   import IntMulFL
from lab1_imul.IntMulBase import IntMulBase
from lab1_imul.IntMulAlt  import IntMulAlt

from lab1_imul.test.IntMulFL_test import TestHarness

#-------------------------------------------------------------------------
# mk_imsg/mk_omsg
#-------------------------------------------------------------------------

# Make input message, truncate ints to ensure they fit in 32 bits.

def mk_imsg( a, b ):
  return concat( Bits32( a, trunc_int=True ), Bits32( b, trunc_int=True ) )

# Make output message, truncate ints to ensure they fit in 32 bits.

def mk_omsg( a ):
  return Bits32( a, trunc_int=True )

def perform_lmask(a, num_bits_to_mask):
  mask = ((1<<32) -1) << num_bits_to_mask
  return Bits32( ( a & mask ), trunc_int=True)

def mk_imsg_lmask(a, b, num_bits_to_mask): # modified mk_imsg to accomodate masking of lower bits
  return concat( perform_lmask(a, num_bits_to_mask), perform_lmask(b, num_bits_to_mask) )

def perform_mmask(a, start_bit, end_bit):
  mask = ~ (((1 << (end_bit - start_bit + 1)) - 1) << start_bit)
  return Bits32( ( a & mask ), trunc_int=True)

def mk_imsg_mmask(a, b, start_bit, end_bit): # modified mk_imsg to accomodate masking of middle bits
  return concat( perform_mmask(a, start_bit, end_bit), perform_mmask(b, start_bit, end_bit) )


#----------------------------------------------------------------------
# Data Set: random small
#----------------------------------------------------------------------

small_pos_neg_msgs = []
small_pos_neg_msgs.extend([mk_imsg(  2,  -3 ), mk_omsg(   -6 ),])
small_pos_neg_msgs.extend([mk_imsg(  4,  -5 ), mk_omsg(  -20 ),])
small_pos_neg_msgs.extend([mk_imsg(  3,  -4 ), mk_omsg(  -12 ),])
small_pos_neg_msgs.extend([mk_imsg( 10, -13 ), mk_omsg( -130 ),])
small_pos_neg_msgs.extend([mk_imsg(  8,  -7 ), mk_omsg(  -56 ),])


#----------------------------------------------------------------------
# Data Set: random small neg pos
#----------------------------------------------------------------------

# Tests that cause output to overflow (input more than 16 bits twos complement)
small_neg_pos_msgs = []
small_neg_pos_msgs.extend([mk_imsg(  -2,  3 ), mk_omsg(   -6 ),])
small_neg_pos_msgs.extend([mk_imsg(  -4,  5 ), mk_omsg(  -20 ),])
small_neg_pos_msgs.extend([mk_imsg(  -3,  4 ), mk_omsg(  -12 ),])
small_neg_pos_msgs.extend([mk_imsg( -10, 13 ), mk_omsg( -130 ),])
small_neg_pos_msgs.extend([mk_imsg(  -8,  7 ), mk_omsg(  -56 ),])

#----------------------------------------------------------------------
# Data Set: random
#----------------------------------------------------------------------

random_msgs = []
for i in range(50):
  rand_a = randint(-2147483648, 2147483647)
  rand_b = randint(-2147483648, 2147483647)
  random_msgs.extend([mk_imsg(rand_a, rand_b),  mk_omsg(rand_a * rand_b)])


#----------------------------------------------------------------------
# Data Set: random lomask
#----------------------------------------------------------------------
random_lomask = []
for i in range(50):
  rand_a = randint(-2147483648, 2147483647)
  rand_b = randint(-2147483648, 2147483647)
  num_bits_to_mask = randint(0, 31)
  masked_rand_a = perform_lmask(rand_a, num_bits_to_mask)
  masked_rand_b = perform_lmask(rand_b, num_bits_to_mask)
  random_lomask.extend([mk_imsg_lmask(rand_a, rand_b, num_bits_to_mask), mk_omsg(masked_rand_a * masked_rand_b)])

#----------------------------------------------------------------------
# Data Set: random middle
#----------------------------------------------------------------------
random_mmask = []
for i in range(50):
  rand_a = randint(-2147483648, 2147483647)
  rand_b = randint(-2147483648, 2147483647)
  start_bit = randint(0, 31)
  end_bit = randint(start_bit, 31)
  masked_rand_a = perform_mmask(rand_a, start_bit, end_bit)
  masked_rand_b = perform_mmask(rand_b, start_bit, end_bit)
  random_mmask.extend([mk_imsg_mmask(rand_a, rand_b, start_bit, end_bit), mk_omsg(masked_rand_a * masked_rand_b)])

#----------------------------------------------------------------------
# Data Set: basic
#----------------------------------------------------------------------

# Use basic tests to demonstrate how the Alt design works compared to the Base design
# Basic tests have a very large number of consecutive zeros and the latency reduction is very apparent
basic_msgs = [
  mk_imsg(  0,  0 ), mk_omsg(  0 ),
  mk_imsg(  1,  1 ), mk_omsg(  1 ),
  mk_imsg( -1, -1 ), mk_omsg(  1 ),

  mk_imsg(  0,  1 ), mk_omsg(  0 ),
  mk_imsg(  1,  0 ), mk_omsg(  0 ),

  mk_imsg(  0, -1 ), mk_omsg(  0 ),
  mk_imsg( -1,  0 ), mk_omsg(  0 ),

  mk_imsg(  1, -1 ), mk_omsg( -1 ),
  mk_imsg( -1,  1 ), mk_omsg( -1 ),
]

#----------------------------------------------------------------------
# Data Set: random
#----------------------------------------------------------------------

# Use random tests for statistical comparison (average number of cycles per multiplication)
random_msgs = [
]

for i in range(50):
  rand_a = randint(-2147483648, 2147483647)
  rand_b = randint(-2147483648, 2147483647)

  # Unmasked
  random_msgs.extend([mk_imsg(rand_a, rand_b),  mk_omsg(rand_a * rand_b)])

  # Low Mask
  num_bits_to_mask = randint(0, 32)
  masked_rand_a = perform_lmask(rand_a, num_bits_to_mask)
  masked_rand_b = perform_lmask(rand_b, num_bits_to_mask)
  random_msgs.extend([mk_imsg_lmask(rand_a, rand_b, num_bits_to_mask), mk_omsg(masked_rand_a * masked_rand_b)])

  # Middle Mask
  start_bit = randint(0, 31)
  end_bit = randint(start_bit, 31)
  masked_rand_a = perform_mmask(rand_a, start_bit, end_bit)
  masked_rand_b = perform_mmask(rand_b, start_bit, end_bit)
  random_msgs.extend([mk_imsg_mmask(rand_a, rand_b, start_bit, end_bit), mk_omsg(masked_rand_a * masked_rand_b)])

#----------------------------------------------------------------------
# Data Set: sparse
#----------------------------------------------------------------------

# Sparse tests should show large latency reduction
sparse_msgs = [
  # Up to 16 bit twos complement
  mk_imsg(  32769,  32897),  mk_omsg( 1078001793 ),
  # More than 16 bit twos complement
  mk_imsg(  11184640, 279620104),  mk_omsg( 3127450200002560 ),
]

#----------------------------------------------------------------------
# Data Set: dense
#----------------------------------------------------------------------

# Dense tests should show minimal latency reduction
dense_msgs = [
  # Up to 16 bit twos complement
  mk_imsg(  31743,  16351 ),  mk_omsg(  519029793 ),
  # More than 16 bit twos complement
  mk_imsg(  1605348090,  2142153466), mk_omsg(  3438901975129979940 ),
]

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--impl", default="fl",
    choices=["fl","base","alt"] )

  p.add_argument( "--input", default="basic",
    choices=["basic","negpos", "posneg","random","lomask", "midmask","sparse", "dense"] )

  p.add_argument( "--trace",     action="store_true" )
  p.add_argument( "--stats",     action="store_true" )
  p.add_argument( "--translate", action="store_true" )
  p.add_argument( "--dump-vcd",  action="store_true" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  # Create the input pattern

  inputs  = None

  if opts.input == "posneg":
    inputs = small_pos_neg_msgs
  elif opts.input == "negpos":
    inputs = small_neg_pos_msgs
  elif opts.input == "basic":
    inputs = basic_msgs
  elif opts.input == "random":
    inputs = random_msgs
  elif opts.input == "lomask":
    inputs = random_lomask
  elif opts.input == "midmask":
    inputs = random_mmask
  elif opts.input == "sparse":
    inputs = sparse_msgs
  elif opts.input == "dense":
    inputs = dense_msgs

  ninputs = len(inputs[::2])

  # Determine which model to use in the simulator

  model_impl_dict = {
    "fl"  : IntMulFL,
    "base": IntMulBase,
    "alt" : IntMulAlt,
  }

  # Check if translation is valid

  if opts.translate and not opts.impl.startswith("rtl"):
    print("\n ERROR: --translate only works with RTL models \n")
    exit(1)

  # Create test harness (we can reuse the harness from unit testing)

  th = TestHarness( model_impl_dict[ opts.impl ]() )

  th.set_param( "top.src.construct",  msgs=inputs[::2]  )
  th.set_param( "top.sink.construct", msgs=inputs[1::2] )

  # Create VCD filename

  unique_name = f"imul-{opts.impl}-{opts.input}"

  cmdline_opts = {
    'dump_vcd': f"{unique_name}" if opts.dump_vcd else '',
    'test_verilog': 'zeros' if opts.translate else '',
  }

  # Configure the test harness component

  config_model_with_cmdline_opts( th, cmdline_opts, duts=['imul'] )

  # Apply necessary passes

  th.apply( DefaultPassGroup( linetrace=opts.trace ) )

  # Reset test harness

  th.sim_reset()

  # Run simulation

  while not th.done():
    th.sim_tick()

  # Extra ticks to make VCD easier to read

  th.sim_tick()
  th.sim_tick()
  th.sim_tick()

  # Display statistics

  if opts.stats:
    print( f"num_cycles         = {th.sim_cycle_count()}" )
    print( f"num_cycles_per_mul = {th.sim_cycle_count()/(1.0*ninputs):1.2f}" )

main()

